// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/cloud-barista/cm-butterfly",
        "contact": {
            "name": "https://github.com/cloud-barista/cm-butterfly",
            "url": "https://github.com/cloud-barista/cm-butterfly"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/adminconfig/category/mngform/": {
            "get": {
                "description": "[CategoryMngForm] Category 설정 폼을 렌더링합니다.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Category 설정 폼 렌더링",
                "responses": {
                    "200": {
                        "description": "adminconfig/categorymng/mngform.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/adminconfig/config/mngform/": {
            "get": {
                "description": "[AdminMngForm] Admin 관리자 설정 폼을 렌더링합니다. : not implement -- 아직 기획된바 없음.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "관리자 설정 폼 렌더링 : not implement -- 아직 기획된바 없음.",
                "responses": {
                    "200": {
                        "description": "adminconfig/regiongroup/mngform.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/adminconfig/menu/mngform/": {
            "get": {
                "description": "[MenuMngForm] Menu 설정 폼을 렌더링합니다.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Menu 설정 폼 렌더링",
                "responses": {
                    "200": {
                        "description": "adminconfig/menumng/mngform.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/api/adminconfig/category/": {
            "get": {
                "security": [
                    {
                        "CSRFTokenHeader": []
                    }
                ],
                "description": "[CategoryList] categoryName을 받아 categoryList를 반환합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Category 리스트 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "categoryName",
                        "name": "categoryName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\":\"success\",\"status\":respStatus.StatusCode,\"regionGroup\":categoryList,}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'respStatus.Message','error':'respStatus.Message'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "[CategoryReg] 카테고리를 등록합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Category 등록",
                "parameters": [
                    {
                        "description": "models.MenuCategory",
                        "name": "Category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MenuCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message': 'success', 'status': 200}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "[CategoryDel] 카테고리를 삭제합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Category 삭제",
                "parameters": [
                    {
                        "description": "models.MenuCategory",
                        "name": "Category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MenuCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message': 'success', 'status': 200}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/adminconfig/category/id/{categoryName}/": {
            "get": {
                "security": [
                    {
                        "CSRFTokenHeader": []
                    }
                ],
                "description": "[CategoryGet] categoryName을 받아 category 단건을 반환합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Category 단건 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "categoryName",
                        "name": "categoryName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','category':'category',}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'errors.WithStack(err)'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/adminconfig/menu/": {
            "get": {
                "description": "[MenuList] menuId, menuName, menuAlias, categoryId 중 순서로 마지막 한개를 받아 메뉴 리스트를 반환합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Menu 리스트 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "menuId",
                        "name": "menuId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "menuName",
                        "name": "menuName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "menuAlias",
                        "name": "menuAlias",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "categoryId",
                        "name": "categoryId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200', 'menuList': 'menuList'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'errors.WithStack(err)'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "[UpdateMenu] models.Menu를 받아 메뉴를 단건 업데이트합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Menu 업데이트",
                "parameters": [
                    {
                        "description": "models.Menu",
                        "name": "menu",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Menu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'errors.WithStack(err)'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "[RegMenu] models.Menu를 받아 메뉴를 단건 등록합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Menu 등록",
                "parameters": [
                    {
                        "description": "models.Menu",
                        "name": "menu",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Menu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'errors.WithStack(err)'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "[DelMenu] models.Menu를 받아 메뉴를 단건 삭제합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Menu 삭제",
                "parameters": [
                    {
                        "description": "models.Menu",
                        "name": "menu",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Menu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'errors.WithStack(err)'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/adminconfig/menu/id/{menuId}/": {
            "get": {
                "description": "[GetMenu] menuId와 menuName, menuAlias, categoryId 중 순서로 마지막 한개를 받아 메뉴를 반환합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Menu 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "menuId",
                        "name": "menuId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "menuName",
                        "name": "menuName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "menuAlias",
                        "name": "menuAlias",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "categoryId",
                        "name": "categoryId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200', 'menu': 'menu'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'errors.WithStack(err)'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/adminconfig/menu/tree/": {
            "get": {
                "description": "[MenuTree] category, menu구조를 tree형태로 쿼리하여 반환합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Menu Tree 조회",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200', 'menutree': 'menutree'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'errors.WithStack(err)'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/adminconfig/regiongroup/": {
            "get": {
                "description": "[RegionGroupList] providerId 와 regionGroupName 을 받아 RegionGroupList를 반환합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "RegionGroup 리스트 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "provider",
                        "name": "provider",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "regionGroupName",
                        "name": "regionGroupName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\":\"success\",\"status\":respStatus.StatusCode,\"regionGroup\":regionGroupList,}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{'error':'respStatus.Message','error':'respStatus.Message'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "[RegRegionGroup] 리전 그룹을 등록합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Region Group 등록",
                "parameters": [
                    {
                        "description": "models.RegionGroup",
                        "name": "regionGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegionGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message': 'success', 'status': respStatus.StatusCode}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':'respStatus.Message','status':respStatus.StatusCode}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "[DelRegionGroup] 리전 그룹을 삭제합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "Region Group 삭제",
                "parameters": [
                    {
                        "description": "models.RegionGroup",
                        "name": "regionGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegionGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message': 'success', 'status': respStatus.StatusCode}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':'respStatus.Message','status':respStatus.StatusCode}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/adminconfig/regiongroup/{regionGroupId}": {
            "get": {
                "description": "[GetRegionGroup] regionGroupId와  providerId, regionGroupName, regionId 중 한개를 받아 regionGroup을 반환합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminconfig"
                ],
                "summary": "RegionGroup 단건 Vpc 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "regionGroupId",
                        "name": "regionGroupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "providerId",
                        "name": "providerId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "regionGroupName",
                        "name": "regionGroupName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "regionId",
                        "name": "regionId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\":\"success\",\"status\":respStatus.StatusCode,\"regionGroup\":regionGroup,}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':'err.Error()','status':'500'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/logout/": {
            "get": {
                "description": "[AuthDestroy] 로그아웃을 합니다. clears the session and logs a user out",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "로그아웃",
                "responses": {
                    "200": {
                        "description": "{'success-Flash': 'You have been logged out!'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/signin/": {
            "post": {
                "description": "[AuthCreate] 존재하는 계정으로 로그인을 시도합니다. attempts to log the user in with an existing account.",
                "tags": [
                    "auth"
                ],
                "summary": "로그인",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "Email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "Password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message': 'success', 'user': 'u'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':'verrs','status':'http.StatusUnauthorized'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/": {
            "get": {
                "description": "[CloudConnectionList] connection 리스트를 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "CloudConnection 리스트 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "providerId",
                        "name": "providerId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "regionName",
                        "name": "regionName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "zoneName",
                        "name": "zoneName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CloudConnection"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "[CloudConnectionUpdate] Cloud Connection을 수정합니다. -- not implementated yet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Cloud Connection을 업데이트 -- not implementated yet",
                "responses": {
                    "200": {
                        "description": "{'message': 'success','status':  'not implementated yet',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "[CloudConnectionCreate] ConnectionReg 등록 후 connection 목록조회\n---- SpiderConnectionReg -\u003e CloudConnectionCreate로 변경\n---- is_cb 가 아니면 connection 등록 후 db 저장하도록 보완할 것.\n---- TODO : SpiderCloudConnectionConfigReg 로 변경할 것\n---- TODO : cloud_connections 저장 MconRegCloudConnection -\u003e 저장실패시 생성한 connection 삭제하도록\n---- TODO : cloud_connections table 조회하도록 변경할 것. : MconCloudConnectionList()\n---- TODO : SpiderCloudConnectionConfigList 로 변경할 것.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "CloudConnection 생성",
                "parameters": [
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/available/": {
            "get": {
                "description": "[AvailableCloudConnectionList] 사용가능한 Cloud Connection  목록을 조회합니다. Check avaiable ConnectionConfig list for creating MCIS Dynamically",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "사용가능한 Cloud Connection 리스트 조회",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/credential/": {
            "get": {
                "description": "[CredentialList] Credential 리스트를 조회합니다.\nSpiderCredentialList -\u003e CredentialList 으로 변경 GET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Credential 리스트 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\":\"success\",\"status\":\"200\",\"Credential\": credentialList,}",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "error\":  err.Error(),\"status\": \"500\",}",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "post": {
                "description": "[CredentialCreate] Credential을 생성합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Credential 생성",
                "parameters": [
                    {
                        "description": "spider.CredentialInfo",
                        "name": "credentialInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/spider.CredentialInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200',}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "[CredentialDelete] Credential 삭제합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Credential 삭제",
                "parameters": [
                    {
                        "description": "models.Credential",
                        "name": "paramCredential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Credential"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/credential/id/{credential}/": {
            "get": {
                "description": "[CredentialGet] Credential 단건 조회합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Credential 단건 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "iscredential_cb",
                        "name": "credential",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','Credential': 'credentialInfo',}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/credential/sync/": {
            "get": {
                "description": "[SyncCredential] CB 조회내역을 DB 에 저장합니다. Credential 동기화[handler.SyncCredential(c)]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Credential 동기화",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/driver/": {
            "get": {
                "description": "[DriverList] driver 리스트 조회합니다. -- swagger TEST 오류 확인함.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Driver 리스트 조회",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Driver"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "[DriverCreate] Driver를 생성합니다.\nSpiderDriverReg 등록 -\u003e DriverCreate 로 변경 /settings/connection/driver",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Driver 생성",
                "parameters": [
                    {
                        "description": "spider.DriverInfo",
                        "name": "paramdriverInfoDriver",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/spider.DriverInfo"
                        }
                    },
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\": \"success\",\"status\":  \"respStatus\",}",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "201": {
                        "description": "error\":  respStatus.Message,\"status\": respStatus.StatusCode,}",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "error\":  err.Error(),\"status\": 500,}",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "delete": {
                "description": "[DriverDelete] Driver를 삭제합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Driver 삭제",
                "parameters": [
                    {
                        "description": "models.Driver",
                        "name": "paramDriver",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Driver"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Driver"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/driver/id/{driverId}/": {
            "get": {
                "description": "[DriverGet] Driver를 단건 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Driver 단건 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "driver",
                        "name": "driver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message': 'success','status': 'respStatus','Driver': 'driverInfo',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/driver/spider/": {
            "get": {
                "description": "[SpiderDriverList] Spider Driver 리스트를 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Spider Driver 리스트 조회",
                "responses": {
                    "200": {
                        "description": "{'message': 'success','status': 'respStatus','Driver': 'driverList',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/driver/spider/id/{driver}/": {
            "delete": {
                "description": "[SpiderDriverDelete] Spider Driver를 삭제합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Spider Driver 삭제",
                "parameters": [
                    {
                        "type": "string",
                        "description": "driver",
                        "name": "driver",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message': 'success','status': 'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/driver/sync/": {
            "get": {
                "description": "[SyncDriver] CB 조회내역을 DB 에 저장합니다. Driver 동기화[handler.SyncDriver(c)]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Driver 동기화",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/generate/all/bycredential": {
            "get": {
                "description": "[GenerateConnectionsByAllCredential] credential 별로 지정 Provider의 모든 region에 대해 connection 생성.\n- 모든 credential에 대해 connection 생성 genconnection\n- handler.GetCredentialList()\n- (현재 설정된 credential 목록 : 목록에서는 key의 value는 ...으로 표시)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "credential 별 모든 region connection 생성",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/generate/bycredential": {
            "get": {
                "description": "[GenerateConnectionsByCredential] credential 별로 지정 Provider의 모든 region에 대해 connection 생성.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "credential 별 지정 Provider 모든 region 생성",
                "parameters": [
                    {
                        "type": "string",
                        "description": "providerId",
                        "name": "providerId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "credentialName",
                        "name": "credentialName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/healthcheck/agent/": {
            "get": {
                "description": "[AgentHealthCheck] MCIS 또는 VM 에 agent 상태 확인",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Agent Health Check -- TODO",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/healthcheck/framework/": {
            "get": {
                "description": "[FrameworkHealthCheck] 프레임워크 헬스체크\n- c.Params().Get(\"framework\")\n- DF의 response 에서 return결과가 \"\"으로 들어와 204를 return 함.\n- DF에서 정상적인 message 보내라고 할 것.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Framework Health Check",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/id/{configName}/": {
            "delete": {
                "description": "[CloudConnectionDelete] Connection을 삭제합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Connection 삭제",
                "parameters": [
                    {
                        "type": "string",
                        "description": "paramConfigName",
                        "name": "paramConfigName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/id/{connectionId}/": {
            "get": {
                "description": "[CloudConnectionGet] connection 단건 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "connection 단건 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "connectionId",
                        "name": "connectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CloudConnection"
                            }
                        }
                    }
                }
            }
        },
        "/api/settings/connection/provider/sync/": {
            "get": {
                "description": "[SyncCloudProvider] CB 조회내역을 DB 에 저장합니다. CloudProvider 동기화[handler.SyncCloudProvider(c)]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "CloudProvider 동기화",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/providers/": {
            "get": {
                "description": "[CloudProviderList] Cloud Provider 리스트를 조회합니다.\nDB에서 가져오게 할 것인가?\nSpiderProviderList 삭제 함 23.07.06",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Cloud Provider 리스트 조회",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus','Region':'resionInfo'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/region/": {
            "get": {
                "description": "[RegionList] Region 리스트를 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Region 리스트 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filterKeyParam",
                        "name": "filterKeyParam",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filterValParam",
                        "name": "filterValParam",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','Region':'regionList'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "[RegionCreate] Region을 생성합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Region 생성",
                "parameters": [
                    {
                        "description": "spider.RegionInfo",
                        "name": "regionInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/spider.RegionInfo"
                        }
                    },
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200',}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "[RegionDelete] Region을 삭제합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Region 삭제",
                "parameters": [
                    {
                        "description": "models.Region",
                        "name": "paramRegion",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Region"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Driver"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/region/all": {
            "get": {
                "description": "[RegionAllList] Region의 모든 리스트를 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Region 모든 리스트를 조회",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Region"
                            }
                        }
                    }
                }
            }
        },
        "/api/settings/connection/region/id/{paramRegion}/": {
            "get": {
                "description": "[RegionGet] Region 단건 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Region 단건 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "paramRegion",
                        "name": "paramRegion",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "is_cb",
                        "name": "is_cb",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus','Region':'resionInfo'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/region/sync/": {
            "get": {
                "description": "[SyncRegion] CB 조회내역을 DB 에 저장합니다. Region 동기화[handler.SyncRegion(c)]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Region 동기화",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/spider/": {
            "get": {
                "description": "[SpiderConnectionList] SPIDER connection 리스트를 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "SPIDER ConnectionList 목록조회",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/spider/id/{connectionId}/": {
            "get": {
                "description": "[SpiderConnectionGet] SPIDER connection 단건을 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "SPIDER Connection 단건조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "connectionId",
                        "name": "connectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/connection/sync/": {
            "get": {
                "description": "[SyncConnection] CB 조회내역을 DB 에 저장합니다. Connection 동기화[handler.SyncConnection(c)]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Connection 동기화",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/resources/datadisk/": {
            "get": {
                "description": "[DataDiskList] Data Disk List를 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "Data Disk List 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "option",
                        "name": "option",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filterKey",
                        "name": "filterKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filterVal",
                        "name": "filterVal",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','defaultNameSpaceID': namespaceID,'status': respStatus.StatusCode,}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "[DataDiskReg] Data Disk를 생성합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "DataDisk 생성",
                "parameters": [
                    {
                        "description": "tbmcir.TbDataDiskReq",
                        "name": "dataDiskRegInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mcir.TbDataDiskReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200',}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/resources/datadisk/availabledisk/": {
            "get": {
                "description": "[McisVmAvailableDataDiskList] VM 이사용가능한 DataDisk Id 목록 조회",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "Mcis Vm Available Data Disk List 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mcisId",
                        "name": "mcisId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "vmID",
                        "name": "vmID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','dataDiskInfoList':dataDiskInfoList}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/resources/datadisk/id/{dataDiskId}/": {
            "get": {
                "description": "[DataDiskGet] Data Disk를 dataDiskId로 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "Data Disk 단건 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dataDiskId",
                        "name": "dataDiskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','dataDiskInfo': dataDiskInfo}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "[DataDiskPut] Data Disk를 변경합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "Data Disk 변경",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dataDiskId",
                        "name": "dataDiskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "tbmcir.TbDataDiskUpsizeReq",
                        "name": "dataDiskUpsizeReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mcir.TbDataDiskUpsizeReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','DataDiskInfo': DataDiskInfo}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "[DataDiskDel] Data Disk를 삭제합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "Data Disk 삭제",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dataDiskId",
                        "name": "dataDiskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/resources/datadisk/lookup/": {
            "get": {
                "description": "[AvailableDataDiskTypeList] Provider, Region에서 사용가능한 DiskType 조회(DiskLookup)\nspider의 cloudos_meta.yaml 참조",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "Available Data Disk List 조회",
                "parameters": [
                    {
                        "type": "string",
                        "description": "providerId",
                        "name": "providerId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "regionName",
                        "name": "regionName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','DiskInfoList':availableDiskTypeList}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/resources/datadisk/mngdata/": {
            "post": {
                "description": "[DataDiskMng] Data Disk Mng(CRD) 합니다.\nCreate, Update, Delete가 한번에 일어나는 경우 사용\nex) table에 addRow로 추가하고 delet로 삭제한 것들을 한번에 저장할 때.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "Data Disk CRD 한번에",
                "parameters": [
                    {
                        "description": "webtool.DataDiskMngReq",
                        "name": "dataDiskRegInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webtool.DataDiskMngReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200',}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/settings/resources/datadisk/region/": {
            "get": {
                "description": "[DataDiskListByRegion] Data Disk List를 connection으로 조회합니다.\n해당리전에 등록 된 DataDisk 목록. connection 필요\nUI 에서 용이하게 쓰기 위함 (콤보 선택용)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "Data Disk List 조회 (connection)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "option",
                        "name": "option",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "connectionName",
                        "name": "filterValParam",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200','defaultNameSpaceID': namespaceID,'dataDiskInfoList': dataDiskInfoList,}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/test/apitest/searchapi/": {
            "post": {
                "description": "[ApiSearch] Api 핸들러를 찾아 Swagger 로 이동합니다.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "debug"
                ],
                "summary": "Api Search swagger : todo : 삭제",
                "responses": {
                    "200": {
                        "description": "redirect",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/api/test/connection/list/": {
            "get": {
                "description": "[CloudConnectionAllList] 모든 connection을 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debug"
                ],
                "summary": "모든 connection 조회",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CloudConnection"
                            }
                        }
                    }
                }
            }
        },
        "/api/test/connection/list/bycred": {
            "post": {
                "description": "[TestCloudConnection] credential로 가능한 Connection 조회합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debug"
                ],
                "summary": "credential로 가능한 Connection 조회",
                "parameters": [
                    {
                        "description": "models.Credentials",
                        "name": "credential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Credential"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'respStatus'}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{'error':  err.Error(),'status': '500',}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/test/routelist/": {
            "get": {
                "description": "[RouteList] 경로정보를 반환 합니다.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "debug"
                ],
                "summary": "경로정보",
                "responses": {
                    "200": {
                        "description": "{'message':'success','status':'200', 'routes': app.Routes()}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/landing/mngform/": {
            "get": {
                "description": "[AuthLandingForm] 렌딩 화면을 렌더링합니다. AuthLanding shows a landing page to login",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "렌딩 화면 렌더링",
                "responses": {
                    "200": {
                        "description": "auth/landing.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/auth/signin/mngform/": {
            "get": {
                "description": "[AuthNewForm] 로그인 화면을 렌더링합니다. AuthNew loads the signin page",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "로그인 화면 렌더링",
                "responses": {
                    "200": {
                        "description": "auth/new.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/operations/globaldashboard/mngform/": {
            "get": {
                "description": "[GlobalDashboardGet] Global Dashboard 폼을 렌더링 합니다. GlobalDashboardMngForm default implementation.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "globaldashboard"
                ],
                "summary": "Global Dashboard 폼 렌더링 : TODO",
                "responses": {
                    "200": {
                        "description": "operations/globaldashboard/mngform.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/settings/connection/mngform/": {
            "get": {
                "description": "[ConnectionMngForm] ConnectionForm은 Connection 설정 폼을 렌더링합니다.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "Connection 설정 폼 렌더링",
                "responses": {
                    "200": {
                        "description": "settings/connection/mngform.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/settings/resources/datadisk/mngform/": {
            "get": {
                "description": "[DataDiskMngForm] 데이터 디스크 화면을 렌더링합니다.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "datadisk"
                ],
                "summary": "데이터 디스크 화면 렌더링",
                "responses": {
                    "200": {
                        "description": "settings/datadisk/mngform.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        },
        "/test/apitest/mngform/": {
            "get": {
                "description": "[ApiTestForm] ApiTest를 렌더링 합니다.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "debug"
                ],
                "summary": "Api test mngform : todo : 삭제",
                "responses": {
                    "200": {
                        "description": "adminconfig/apitest/mngform.html",
                        "schema": {
                            "type": "html"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "mcir.TbDataDiskReq": {
            "type": "object",
            "properties": {
                "connectionName": {
                    "type": "string"
                },
                "cspDataDiskId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "diskSize": {
                    "type": "string"
                },
                "diskType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "providerId": {
                    "description": "connection 을 provider, regname으로 대체를 위해 추가",
                    "type": "string"
                },
                "providerName": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                },
                "zoneName": {
                    "type": "string"
                }
            }
        },
        "mcir.TbDataDiskUpsizeReq": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "diskSize": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "providerName": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                },
                "zoneName": {
                    "type": "string"
                }
            }
        },
        "models.CloudConnection": {
            "type": "object",
            "properties": {
                "connection_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "credential": {
                    "$ref": "#/definitions/models.Credential"
                },
                "credential_id": {
                    "type": "string"
                },
                "driver": {
                    "$ref": "#/definitions/models.Driver"
                },
                "driver_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.CloudProvider"
                },
                "provider_id": {
                    "description": "사용하는 참조 : fk 설정이 해당 테이블에 되어있어야 함.",
                    "type": "string"
                },
                "region": {
                    "$ref": "#/definitions/models.Region"
                },
                "region_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.CloudProvider": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "provider_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Credential": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "credentialName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.CloudProvider"
                },
                "provider_id": {
                    "description": "사용하는 참조 : fk 설정이 해당 테이블에 되어있어야 함.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "userLevel": {
                    "type": "string"
                }
            }
        },
        "models.Driver": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "driver_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lib_file_name": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.CloudProvider"
                },
                "provider_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Menu": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "DB 값이 NULL로 나와서 STRING 에 할당하지 못하여 우선 주석처리, TODO : Alias 기본값을 주거나, 모델에서 NULL을 허용하는 방법을 찾으면 될듯!",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "menuCategory": {
                    "$ref": "#/definitions/models.MenuCategory"
                },
                "menu_category_id": {
                    "description": "사용하는 참조 : fk 설정이 해당 테이블에 되어있어야 함.",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sort": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "visible": {
                    "type": "boolean"
                }
            }
        },
        "models.MenuCategory": {
            "type": "object",
            "properties": {
                "category_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "parent_category_id": {
                    "type": "string"
                },
                "sort": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "use_yn": {
                    "type": "boolean"
                }
            }
        },
        "models.Region": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.CloudProvider"
                },
                "provider_id": {
                    "type": "string"
                },
                "regionKeyValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RegionKeyvalue"
                    }
                },
                "regionName": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.RegionGroup": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "csp_region_name": {
                    "description": "raw query로 호출하여 return하기위해 추가",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "provider_id": {
                    "type": "string"
                },
                "provider_name": {
                    "description": "raw query로 호출하여 return하기위해 추가",
                    "type": "string"
                },
                "region_group_name": {
                    "type": "string"
                },
                "region_id": {
                    "type": "string"
                },
                "region_name": {
                    "description": "raw query로 호출하여 return하기위해 추가",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.RegionKeyvalue": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "region": {
                    "$ref": "#/definitions/models.Region"
                },
                "region_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "spider.CredentialInfo": {
            "type": "object",
            "properties": {
                "CredentialName": {
                    "description": "user(username, password, email)",
                    "type": "string"
                },
                "KeyValueInfoList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/spider.SpKeyValueInfo"
                    }
                },
                "ProviderName": {
                    "type": "string"
                }
            }
        },
        "spider.DriverInfo": {
            "type": "object",
            "properties": {
                "DriverLibFileName": {
                    "type": "string"
                },
                "DriverName": {
                    "description": "user(username, password, email)",
                    "type": "string"
                },
                "ProviderName": {
                    "type": "string"
                }
            }
        },
        "spider.RegionInfo": {
            "type": "object",
            "properties": {
                "KeyValueInfoList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/spider.SpKeyValueInfo"
                    }
                },
                "ProviderName": {
                    "type": "string"
                },
                "RegionName": {
                    "type": "string"
                }
            }
        },
        "spider.SpKeyValueInfo": {
            "type": "object",
            "properties": {
                "Key": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "webtool.DataDiskCreateReq": {
            "type": "object",
            "properties": {
                "attachVmId": {
                    "description": "VmID       string ` + "`" + `json:\"vmId\"` + "`" + `",
                    "type": "string"
                },
                "connectionName": {
                    "type": "string"
                },
                "cspDataDiskId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "diskSize": {
                    "type": "string"
                },
                "diskType": {
                    "type": "string"
                },
                "mcisId": {
                    "description": "Attach VMID",
                    "type": "string"
                },
                "name": {
                    "description": "tbmcir.TbDataDiskReq",
                    "type": "string"
                }
            }
        },
        "webtool.DataDiskMngReq": {
            "type": "object",
            "properties": {
                "attachDataDiskList": {
                    "description": "attach list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createDataDiskList": {
                    "description": "create disk list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webtool.DataDiskCreateReq"
                    }
                },
                "dataDiskList": {
                    "description": "del disk list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "detachDataDiskList": {
                    "description": "detach list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "cm-butterfly",
	Description:      "cloud-barista/cm-butterfly",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
