import { TabulatorFull as Tabulator } from "tabulator-tables";
import { selectedMcisObj } from "./mcis";
document.addEventListener("DOMContentLoaded", initMcisCreatePage)

// create page 가 load 될 때 실행해야 할 것들 정의
function initMcisCreatePage(){

	initSpecTable();// recommand popup에서 사용하는 table 정의.
}


var table;
var totalMcisListObj = new Object();
var isVm = false // mcis 생성(false) / vm 추가(true)
var Express_Server_Config_Arr = new Array();
var express_data_cnt = 0


// 서버 더하기버튼 클릭시 서버정보 입력area 보이기/숨기기
// isExpert의 체크 여부에 따라 바뀜.
// newServers 와 simpleServers가 있음.
export function displayNewServerForm() {

	var div = document.getElementById("server_configuration");
	webconsolejs["partials/layout/navigatePages"].toggleElement(div)


	// var expressServerConfig = $("#expressServerConfig");
	// var deploymentAlgo = $("#placement_algo").val();
	// var simpleServerConfig = $("#simpleServerConfig");
	// var expertServerConfig = $("#expertServerConfig");
	// var importServerConfig = $("#importServerConfig");
	// var expressServerConfig = $("#expressServerConfig");
	// console.log("is import = " + IsImport + " , deploymentAlgo " + deploymentAlgo)
	// // if ($("#isImport").is(":checked")) {
	// if (IsImport) {
	//     simpleServerConfig.removeClass("active");
	//     expertServerConfig.removeClass("active");
	//     importServerConfig.addClass("active");
	//     expressServerConfig.removeClass("active");
	// } else if (deploymentAlgo == "expert") {
	//     simpleServerConfig.removeClass("active");
	//     expertServerConfig.toggleClass("active");//
	//     importServerConfig.removeClass("active");
	//     expressServerConfig.removeClass("active");
	// } else if (deploymentAlgo == "simple") {
	//     simpleServerConfig.toggleClass("active");//
	//     expertServerConfig.removeClass("active");
	//     importServerConfig.removeClass("active");
	//     expressServerConfig.removeClass("active");

	// } else {
	//     //simpleServerConfig        
	//     console.log("exp")
	//     simpleServerConfig.removeClass("active");
	//     expertServerConfig.removeClass("active");
	//     importServerConfig.removeClass("active");
	//     expressServerConfig.toggleClass("active");//        
	// }
}


// express모드 -> Done버튼 클릭 시
export function expressDone_btn() {

	console.log("hi")

	// express 는 common resource를 하므로 별도로 처리(connection, spec만)
	$("#p_provider").val($("#ep_provider").val())
	$("#p_connectionName").val($("#ep_connectionName").val())
	$("#p_name").val($("#ep_name").val())
	$("#p_description").val($("#ep_description").val())
	$("#p_imageId").val($("#ep_imageId").val())

	$("#p_commonImageId").val($("#ep_commonImageId").val())

	$("#p_commonSpecId").val($("#ep_commonSpecId").val())
	$("#p_root_disk_type").val($("#ep_root_disk_type").val())
	$("#p_root_disk_size").val($("#ep_root_disk_size").val())

	$("#p_specId").val($("#ep_specId").val())

	$("#p_subGroupSize").val($("#ep_vm_add_cnt").val() + "")
	$("#p_vm_cnt").val($("#ep_vm_add_cnt").val() + "")

	//var express_form = $("#express_form").serializeObject()
	// commonSpec 으로 set 해야하므로 재설정
	var express_form = {}
	express_form["name"] = $("#p_name").val();
	express_form["connectionName"] = $("#p_connectionName").val();
	express_form["description"] = $("#p_description").val();
	express_form["subGroupSize"] = $("#p_subGroupSize").val();
	express_form["image"] = $("#p_imageId").val();
	express_form["spec"] = $("#p_specId").val();
	express_form["rootDiskSize"] = $("#p_root_disk_size").val();
	express_form["rootDiskType"] = $("#p_root_disk_type").val();

	// dynamic에서 commonImage를 param으로 받기 때문에 해당 값 설정
	express_form["commonImage"] = $("#p_commonImageId").val();
	express_form["commonSpec"] = $("#p_commonSpecId").val();//

	console.log("express_form form : ", express_form);

	var server_name = express_form.name

	var server_cnt = parseInt(express_form.subGroupSize)
	console.log("server_cnt", server_cnt)

	var add_server_html = "";

	Express_Server_Config_Arr.push(express_form)


	var displayServerCnt = '(' + server_cnt + ')'

	add_server_html += '<li class="removebullet btn btn-info" onclick="webconsolejs[\'pages/operation/manage/createmcis\'].view_express(\'' + express_data_cnt + '\')">'
	
		+ server_name + displayServerCnt
	
		+ '</li>';

	// }
	// $(".section").removeClass("active");

	// var div = document.getElementById("server_configuration");
	// webconsolejs["partials/layout/navigatePages"].toggleElement(div)

	var div = document.getElementById("server_configuration");
	webconsolejs["partials/layout/navigatePages"].toggleSubElement(div)

	// $("#mcis_server_list").prepend(add_server_html)
	// $("#plusVmIcon").remove();
	// $("#mcis_server_list").prepend(getPlusVm());


	console.log("add server html");

	var vmEleId = "vm"
	if (!isVm) {
		vmEleId = "mcis"
	}		
	console.log("add vm")
	$("#" + vmEleId + "_plusVmIcon").remove();
	$("#" + vmEleId + "_server_list").append(add_server_html)
	$("#" + vmEleId + "_server_list").prepend(getPlusVm(vmEleId));


	console.log("express btn click and express form data : ", express_form)
	console.log("express data array : ", Express_Server_Config_Arr);
	express_data_cnt++;
	$("#express_form").each(function () {
		this.reset();
	})
	$("#ep_data_disk").val("");

}

export function view_express(cnt) {
	console.log('view simple cnt : ', cnt);
	// var select_form_data = Simple_Server_Config_Arr[cnt]
	// console.log('select_form_data : ', select_form_data);
	// $(".express_servers_config").addClass("active")
	// $(".simple_servers_config").removeClass("active")
	// $(".expert_servers_config").removeClass("active")
	// $(".import_servers_config").removeClass("active")

	var div = document.getElementById("server_configuration");
	webconsolejs["partials/layout/navigatePages"].toggleElement(div)


}


// Assist spec 클릭 시
// 공통으로 뺄 것

var ROOT_DISK_MAX_VALUE = 0;
var ROOT_DISK_MIN_VALUE = 0;

// Disk Type 선택 시 Disk Size Min/Max 설정 > 보완할 것
export function changeDiskSize(type) {
	var disk_size = DISK_SIZE;

	if (disk_size) {
		disk_size.forEach(item => {
			var temp_size = item.split("|")
			var temp_type = temp_size[0];
			if (temp_type == type) {
				ROOT_DISK_MAX_VALUE = temp_size[1]
				ROOT_DISK_MIN_VALUE = temp_size[2]
			}
		})
	}
	console.log("ROOT_DISK_MAX_VALUE : ", ROOT_DISK_MAX_VALUE)
	console.log("ROOT_DISK_MIN_VALUE : ", ROOT_DISK_MIN_VALUE)
	$("#s_rootDiskType").val(type);
	$("#e_rootDiskType").val(type);

}

export async function getRecommendVmInfo() {
	console.log("hihi")

	// var max_cpu = $("#num_vCPU_max").val()
	// var min_cpu = $("#num_vCPU_min").val()
	// var max_mem = $("#num_memory_max").val()
	// var min_mem = $("#num_memory_min").val()
	// var max_cost = $("#num_cost_max").val()
	// var min_cost = $("#num_cost_min").val()
	// var limit = $("#recommendVmLimit").val()
	// var lon = $("#longitude").val()
	// var lat = $("#latitude").val()

	var memoryVal = $("#assist_num_memory").val()
	var cpuVal = $("#assist_num_cpu").val()
	var costVal = $("#assist_num_cost").val()
	var lon = $("#longitude").val()
	var lat = $("#latitude").val()

	const data = {
		request: {
			"filter": {
				"policy": [
					{
						"condition": [
							{
								"operand": cpuVal,
								"operator": "<="
							}
						],
						"metric": "vCPU"
					},
					{
						"condition": [
							{
								"operand": memoryVal,
								"operator": "<="
							}
						],
						"metric": "memoryGiB"
					},
					{
						"condition": [
							{
								"operand": costVal,
								"operator": "<="
							}
						],
						"metric": "costPerHour"
					}
				]
			},
			"limit": "50",
			"priority": {
				"policy": [
					{
						"metric": "location",
						"parameter": [
							{
								"key": "coordinateClose",
								"val": [
									lon + "/" + lat
								]
							}
						],
						"weight": "0.3"
					}
				]
			}
		}
	}

	var controller = "/api/" + "mcisrecommendvm";
	const response = await webconsolejs["common/api/http"].commonAPIPost(
		controller,
		data
	);

	console.log("responseaaa", response.data.responseData)
	var specList = response.data.responseData

	totalMcisListObj = specList
	table.setData(totalMcisListObj)

	// getSpecListCallBackSuccess(specList);


	// var max_cpu = $("#num_vCPU_max").val()
	// var min_cpu = $("#num_vCPU_min").val()
	// var max_mem = $("#num_memory_max").val()
	// var min_mem = $("#num_memory_min").val()
	// var max_cost = $("#num_cost_max").val()
	// var min_cost = $("#num_cost_min").val()
	// var limit = $("#recommendVmLimit").val()
	// var lon = $("#longitude").val()
	// var lat = $("#latitude").val()

	// console.log(" lon " + lon + ", lat " + lat)
	// if (lon == "" || lat == "") {
	// 	commonAlert(" 지도에서 위치를 선택하세요 ")
	// 	return;
	// }

	// 	} else {
	// 		var message = result.data.message;
	// 		commonAlert("Fail Create Spec : " + message + "(" + statusCode + ")");

	// 	}

}

function setSpecTabulator(
	tableObjId,
	tableObjParamMap,
	columnsParams,
	isMultiSelect
) {
	var placeholder = "No Data";
	var pagination = "local";
	var paginationSize = 5;
	var paginationSizeSelector = [5, 10, 15, 20];
	var movableColumns = true;
	var columnHeaderVertAlign = "middle";
	var paginationCounter = "rows";
	var layout = "fitColumns";

	if (tableObjParamMap.hasOwnProperty("placeholder")) {
		placeholder = tableObjParamMap.placeholder;
	}

	if (tableObjParamMap.hasOwnProperty("pagination")) {
		pagination = tableObjParamMap.pagination;
	}

	if (tableObjParamMap.hasOwnProperty("paginationSize")) {
		paginationSize = tableObjParamMap.paginationSize;
	}

	if (tableObjParamMap.hasOwnProperty("paginationSizeSelector")) {
		paginationSizeSelector = tableObjParamMap.paginationSizeSelector;
	}

	if (tableObjParamMap.hasOwnProperty("movableColumns")) {
		movableColumns = tableObjParamMap.movableColumns;
	}

	if (tableObjParamMap.hasOwnProperty("columnHeaderVertAlign")) {
		columnHeaderVertAlign = tableObjParamMap.columnHeaderVertAlign;
	}

	if (tableObjParamMap.hasOwnProperty("paginationCounter")) {
		paginationCounter = tableObjParamMap.paginationCounter;
	}

	if (tableObjParamMap.hasOwnProperty("layout")) {
		layout = tableObjParamMap.layout;
	}

	var tabulatorTable = new Tabulator("#" + tableObjId, {
		//ajaxURL:"http://localhost:3000/operations/mcismng?option=status",
		placeholder,
		pagination,
		paginationSize,
		paginationSizeSelector,
		movableColumns,
		columnHeaderVertAlign,
		paginationCounter,
		layout,
		columns: columnsParams,
		selectableRows: isMultiSelect == false ? 1 : true,
		selectable: true,
	});

	return tabulatorTable;
}

var recommendSpecs = [];

// spec-search의 Table 초기값 설정
function initSpecTable() {
	console.log("initSpecTable");
	var tableObjParams = {};

	var columns = [
		{
			formatter: "rowSelection",
			titleFormatter: "rowSelection",
			vertAlign: "middle",
			hozAlign: "center",
			headerHozAlign: "center",
			headerSort: false,
			width: 60,
		},
		{
			title: "connectionName",
			field: "connectionName",
			headerSort: false,
			visible: false
		},
		{
			title: "EVALUATIONSCORE",
			field: "evaluationScore10",
			headerSort: false,
			visible: false
		},
		{
			title: "PROVIDER",
			field: "providerName",
			vertAlign: "middle",
			hozAlign: "center",
			headerHozAlign: "center",
			headerSort: false,
			maxWidth: 100,
		},
		{
			title: "REGION",
			field: "regionName",
			vertAlign: "middle"
		},
		{
			title: "PRICE",
			field: "costPerHour",
			vertAlign: "middle",
			hozAlign: "center",
		},
		{
			title: "MEMORY",
			field: "memoryGiB",
			vertAlign: "middle",
			hozAlign: "center",
			maxWidth: 150,
		},
		{
			title: "VCPU",
			field: "vCPU",
			vertAlign: "middle",
			hozAlign: "center",
			headerHozAlign: "center",
			maxWidth: 135,
		}
	];

	table = setSpecTabulator("spec-table", tableObjParams, columns);


	table.on("rowSelectionChanged", function (data, rows) {
		console.log("data", data)

		updateSelectedRows(data)
	});
}

function updateSelectedRows(data) {
	recommendSpecs = []; // 선택된 행의 데이터를 초기화

	data.forEach(function (rowData) {
		recommendSpecs.push(rowData);
	});

	console.log("선택된 행 데이터:", recommendSpecs);
}

// apply 클릭시 데이터 SET
// returnSpecInfo()
export async function applySpecInfo() {
	console.log("array", recommendSpecs)
	var selectedSpecs = recommendSpecs[0]

	// pre-release -> mode = express 고정
	//caller == "express"


	var provider = selectedSpecs.providerName
	var connectionName = selectedSpecs.connectionName
	var specName = selectedSpecs.cspSpecName
	var imageName = await availableVMImageBySpec(selectedSpecs.id)
	var commonSpecId = selectedSpecs.id // common specid for create dynamic mcis

	console.log("commonSpecId", commonSpecId)
	console.log("connectionName", selectedSpecs.connectionName)
	console.log("providerName", selectedSpecs.providerName)
	console.log("cspSpecName", selectedSpecs.cspSpecName)
	console.log("123123123", imageName)

	$("#ep_provider").val(provider)
	$("#ep_connectionName").val(connectionName)
	$("#ep_specId").val(specName)
	$("#ep_imageId").val(imageName)
	$("#ep_commonSpecId").val(commonSpecId)
	// commonImage는 availableVMImageBySpec에서 조회 후 설정한다 (두 개 이상일 수 있음)

	getCommonLookupDiskInfo(provider, connectionName)


}

// TODO: 스펙 선택 시 사용가능한 이미지의 개수가 두개 이상일 때 선택하는 UI 추가 구현 필요
async function availableVMImageBySpec(id) {

	var imageIds = []
	var commonimageId = [] // params for create dynamic mcis 

	const data = {
		request: {
			"CommonSpec": [
				id
			]

		}
	}

	var controller = "/api/" + "mcisdynamiccheckrequest";
	const response = await webconsolejs["common/api/http"].commonAPIPost(
		controller,
		data
	);

	// TODO: 스펙 선택 시 사용가능한 이미지의 개수가 두개 이상일 때 선택하는 UI 추가 구현 필요
	// image ID 추출
	response.data.responseData.reqCheck.forEach(function (req) {
		req.image.forEach(function (img) {
			console.log("reqCheckreqCheckreqCheck", img)
			imageIds.push(img.guestOS);
			commonimageId.push(img.id);
		});
	});
	$("#ep_commonImageId").val(commonimageId[0])

	console.log("Image IDs:", imageIds);
	console.log("firstImageId", imageIds[0])
	console.log("commonImageid : ", commonimageId[0])

	return imageIds[0]
}

// 해당 provider, connection 으로 사용가능한 Disk의 Type 정보(type, min, max ) 조회
// ex) AWS -> standard|1|1024, gp2|1|16384
async function getCommonLookupDiskInfo(provider, connectionName) {

	const data = {
		queryParams: {
			"provider": provider,
			"connectionName": connectionName
		}
	}

	var controller = "/api/" + "disklookup";
	const response = await webconsolejs["common/api/http"].commonAPIPost(
		controller,
		data
	);
	console.log("lookup disk info", response)
	var responseData = response.data.responseData
	getCommonLookupDiskInfoSuccess(provider, responseData)
}

var DISK_SIZE = [];
function getCommonLookupDiskInfoSuccess(provider, data) {

	console.log("getCommonLookupDiskInfoSuccess", data);
	var providerId = provider.toUpperCase()
	var root_disk_type = [];
	var res_item = data;
	res_item.forEach(item => {
		console.log("item provider: ", item.providerId);
		var temp_provider = item.providerId
		if (temp_provider == providerId) {
			root_disk_type = item.rootdisktype
			DISK_SIZE = item.disksize
		}
	})
	// var temp_provider = res_item.providerId
	// if(temp_provider == provider){
	// 	root_disk_type = res_item.rootdisktype
	// 	DISK_SIZE = res_item.disksize
	// }

	console.log("DISK_SIZE", DISK_SIZE)
	var html = '<option value="">Select Root Disk Type</option>'
	console.log("root_disk_type : ", root_disk_type);
	root_disk_type.forEach(item => {
		html += '<option value="' + item + '">' + item + '</option>'
	})
	//if(caller == "vmexpress"){
	$("#ep_root_disk_type").empty();
	$("#ep_root_disk_type").append(html);
	//}else if(caller == "vmsimple"){
	// $("#ss_root_disk_type").empty();
	// $("#ss_root_disk_type").append(html);
	//}else if(caller == "vmexpert"){
	// $("#tab_others_root_disk_type").empty()
	// $("#tab_others_root_disk_type").append(html)
	//}
	console.log("const valie DISK_SIZE : ", DISK_SIZE)

	var myModalEl = document.getElementById('spec-search');
	var modal = bootstrap.Modal.getInstance(myModalEl); // Returns a Bootstrap modal instance
	modal.hide();

}

export function showRecommendSpecSetting(value) {
	console.log("Selected coordinate : ", value)
	if (value === "seoul") {
		$("#latitude").val("37.532600")
		$("#longitude").val("127.024612")
	} else if (value === "london") {
		$("#latitude").val("51.509865")
		$("#longitude").val("-0.118092")
	} else if (value === "newyork") {
		$("#latitude").val("40.730610")
		$("#longitude").val("-73.935242")
	}
}

// plus 버튼을 추가
function getPlusVm(vmElementId) {

	var append = "";
	append = append + '<li class="removebullet btn btn-secondary-lt" id="' + vmElementId + '_plusVmIcon" onClick="webconsolejs[\'pages/operation/manage/createmcis\'].displayNewServerForm()">';
	append = append + "+"
	append = append + '</li>';
	return append;
}
// 서버정보 입력 area에서 'DONE'버튼 클릭시 array에 담고 form을 초기화

var TotalServerConfigArr = new Array();
// deploy 버튼 클릭시 등록한 서버목록을 배포.
// function btn_deploy(){
export function deployMcis() {
	console.log("deployMcis")
	createMcisDynamic()
	// express 는 express 만, simple + expert + import 는 합쳐서
	// 두개의 mcis는 만들어 질 수 없으므로 
	// var deploymentAlgo = $("#placement_algo").val()
	// if (deploymentAlgo == "express") {
	// 	createMcisDynamic()
	// }
	// else{
	//     var mcis_name = $("#mcis_name").val();
	//     if (!mcis_name) {
	//         commonAlert("Please Input MCIS Name!!!!!")
	//         return;
	//     }
	//     var mcis_desc = $("#mcis_desc").val();
	//     var placement_algo = $("#placement_algo").val();
	//     var installMonAgent = $("#installMonAgent").val();

	//     var new_obj = {}

	//     var vm_len = 0;

	//     if (IsImport) {
	//         // ImportedMcisScript.name = mcis_name;
	//         // ImportedMcisScript.description = mcis_desc;
	//         // ImportedMcisScript.installMonAgent = installMonAgent;
	//         // console.log(ImportedMcisScript);
	//         //var theJson = jQuery.parseJSON($(this).val())
	//         //$("#mcisImportScriptPretty").val(fmt);	
	//         new_obj = $("#mcisImportScriptPretty").val();
	//         new_obj.id = "";// id는 비워준다.
	//     } else {
	//         //         console.log(Simple_Server_Config_Arr)

	//         // mcis 생성이므로 mcisID가 없음
	//         new_obj['name'] = mcis_name
	//         new_obj['description'] = mcis_desc
	//         new_obj['installMonAgent'] = installMonAgent

	//         // Express_Server_Config_Arr 은 별도처리


	//         if (Simple_Server_Config_Arr) {
	//             vm_len = Simple_Server_Config_Arr.length;
	//             for (var i in Simple_Server_Config_Arr) {
	//                 TotalServerConfigArr.push(Simple_Server_Config_Arr[i]);
	//             }
	//         }

	//         if (Expert_Server_Config_Arr) {
	//             vm_len = Expert_Server_Config_Arr.length;
	//             for (var i in Expert_Server_Config_Arr) {
	//                 TotalServerConfigArr.push(Expert_Server_Config_Arr[i]);
	//             }
	//         }

	//         if (TotalServerConfigArr) {
	//             vm_len = TotalServerConfigArr.length;
	//             console.log("Server_Config_Arr length: ", vm_len);
	//             new_obj['vm'] = TotalServerConfigArr;
	//             console.log("new obj is : ", new_obj);
	//         } else {
	//             commonAlert("Please Input Servers");
	//             $(".simple_servers_config").addClass("active");
	//             $("#s_name").focus();
	//         }
	//     }

	//     var url = getWebToolUrl("McisRegProc")
	//     try {
	//         axios.post(url, new_obj, {
	//             // headers: {
	//             //     'Content-type': "application/json",
	//             // },
	//         }).then(result => {
	//             console.log("MCIR Register data : ", result);
	//             console.log("Result Status : ", result.status);
	//             if (result.status == 201 || result.status == 200) {
	//                 commonResultAlert("Register Requested")
	//             } else {
	//                 commonAlert("Register Fail")
	//             }
	//         }).catch((error) => {
	//             // console.warn(error);
	//             console.log(error.response)
	//             var errorMessage = error.response.data.error;
	//             var statusCode = error.response.status;
	//             commonErrorAlert(statusCode, errorMessage)

	//         })
	//     } catch (error) {
	//         commonAlert(error);
	//         console.log(error);
	//     }
	// }    
}

export async function createMcisDynamic() {
	console.log("createMcisDynamic")
	// var namespace = webconsolejs["common/api/services/workspace_api"].getCurrentProject()
	// nsid = namespace.Name

	var projectId = $("#select-current-project").text()	
	var projectName = $('#select-current-project').find('option:selected').text();
	var nsId = projectName;
	console.log("create ssss nsId ", projectName)
	
	var mcisName = $("#mcis_name").val()
	var mcisDesc = $("#mcis_desc").val()


	console.log("mcisName", mcisName)
	console.log("mcisDesc", mcisDesc)
	console.log("Express_Server_Config_Arr", Express_Server_Config_Arr)



	if (!mcis_name) {
		commonAlert("Please Input MCIS Name!!!!!")
		return;
	}

	if (!mcisDesc) {
		mcisDesc = "Made in CB-TB"
	}
	var obj = {}
	obj['name'] = mcisName
	obj['description'] = mcisDesc
	obj['vm'] = Express_Server_Config_Arr
	const data = {
		pathParams: {
			"nsId": nsId
		},
		Request: {
			"name": obj['name'],
			"vm": obj['vm'],
		}
	}

	var controller = "/api/" + "createdynamicmcis";
	const response = webconsolejs["common/api/http"].commonAPIPost(
		controller,
		data
	);

	//console.log("create dynamicMCIS : ", response)

	alert("생성요청 완료");
	var urlParamMap = new Map();

	// 생성요청했으므로 결과를 기다리지 않고 mcisList로 보냄
	webconsolejs["common/util"].changePage("McisMng", urlParamMap)
	// webconsolejs["common/util"].changePage("McisMng")
}

export function addNewMcis() {
	isVm = false
	Express_Server_Config_Arr = new Array();
}

// ////////////// VM Handling ///////////
export function addNewVirtualMachine() {
	console.log("addNewVirtualMachine")
	Express_Server_Config_Arr = new Array();

	var selectedMcis = webconsolejs["pages/operation/manage/mcis"].selectedMcisObj
	console.log("selectedMcis", selectedMcis)

	var mcis_name = selectedMcis[0].name
	$("#extend_mcis_name").val(mcis_name)
	console.log("extend_mcis_name", mcis_name)

	isVm = true
}


var totalDeployServerCount = 0;
var TotalServerConfigArr = new Array();// 최종 생성할 서버 목록

export async function btn_deploy() {
	// var deploymentAlgo = $("#placement_algo").val()
	// if (deploymentAlgo == "express") {
	await createVmDynamic()
	// }else{

	//     var mcis_name = $("#mcis_name").val();
	//     var mcis_id = $("#mcis_id").val();
	//     if (!mcis_id) {
	//         commonAlert("Please Select MCIS !!!!!")
	//         return;
	//     }
	//     totalDeployServerCount = 0;// deploy vm 개수 초기화
	//     var new_obj = {}// vm이 담길 변수

	//     // Express 는 별도처리임.

	//     if (Simple_Server_Config_Arr) {
	//         vm_len = Simple_Server_Config_Arr.length;
	//         for (var i in Simple_Server_Config_Arr) {
	//             TotalServerConfigArr.push(Simple_Server_Config_Arr[i]);
	//         }
	//     }

	//     if (Expert_Server_Config_Arr) {
	//         vm_len = Expert_Server_Config_Arr.length;
	//         for (var i in Expert_Server_Config_Arr) {
	//             TotalServerConfigArr.push(Expert_Server_Config_Arr[i]);
	//         }
	//     }

	//     //Import_Server_Config_Arr : import도 같이 추가
	//     if (Import_Server_Config_Arr) {
	//         vm_len = Import_Server_Config_Arr.length;
	//         for (var i in Import_Server_Config_Arr) {
	//             TotalServerConfigArr.push(Import_Server_Config_Arr[i]);
	//         }
	//     }

	//     if (TotalServerConfigArr) {
	//         vm_len = TotalServerConfigArr.length;
	//         console.log("Server_Config_Arr length: ", vm_len);
	//         new_obj['vm'] = TotalServerConfigArr;
	//         console.log("new obj is : ", new_obj);
	//     } else {
	//         commonAlert("Please Input Servers");
	//         $(".simple_servers_config").addClass("active");
	//         $("#s_name").focus();
	//     }

	//     //var url = "/operation/manages/mcismng/" + mcis_id + "/vm/reg/proc"
	//     var urlParamMap = new Map();
	//     urlParamMap.set(":mcisID", mcis_id)
	//     var url = setUrlByParam("McisVmListRegProc", urlParamMap)
	//     //var url = getWebToolUrl("McisVmRegProc")
	//     try {
	//         axios.post(url, new_obj, {
	//             // headers: {
	//             //     'Content-type': "application/json",
	//             // },
	//         }).then(result => {
	//             console.log("VM Register data : ", result);
	//             console.log("Result Status : ", result.status);
	//             if (result.status == 201 || result.status == 200) {
	//                 commonResultAlert("Register Requested")
	//             } else {
	//                 commonAlert("Register Fail")
	//             }
	//         }).catch((error) => {
	//             // console.warn(error);
	//             console.log(error.response)
	//             var errorMessage = error.response.data.error;
	//             var statusCode = error.response.status;
	//             commonErrorAlert(statusCode, errorMessage)

	//         })
	//     } catch (error) {
	//         commonAlert(error);
	//         console.log(error);
	//     }
	// }
}

var nsid = ""
export async function createVmDynamic() {
	console.log("createVmDynamic")
	console.log("Express_Server_Config_Arr", Express_Server_Config_Arr)


	nsid = webconsolejs["pages/operation/manage/mcis"].nsid
	console.log("selected projectId : ", nsid)

	var mcisid = webconsolejs["pages/operation/manage/mcis"].selectedMcisObj[0].id
	console.log("selected mcisId : ", mcisid)

	// var commonImage = selectedMcisObj[0].vm[0].
	// var mcis_name = selectedMcis[0].name

	// var mcis_name = $("#mcis_name").val();
	// var mcis_id = $("#mcis_id").val();
	// if (!mcis_id) {
	// 	commonAlert("Please Select MCIS !!!!!")
	// 	return;
	// }

	///
	var obj = {}
	obj = Express_Server_Config_Arr[0]
	const data = {
		pathParams: {
			nsId: nsid,
			mcisId: mcisid,
		},
		request: {
			"commonImage": obj.commonImage,
			"commonSpec": obj.commonSpec,
			"connectionName": obj.connectionName,
			"description": obj.description,
			"label": "",
			"name": obj.name,
			"subGroupSize": obj.subGroupSize,
			"rootDiskSize": obj.rootDiskSize,
			"rootDiskType": obj.rootDiskType,
		}
	}


	var controller = "/api/" + "createvmdynamic";
	const response = await webconsolejs["common/api/http"].commonAPIPost(
		controller,
		data
	)
	console.log("create VMdynamic : ", response)
}

// {
// 	"commonImage": "ubuntu18.04",
// 	"commonSpec": "aws+ap-northeast-2+t2.small",
// 	"connectionName": "string",
// 	"description": "Description",
// 	"label": "DynamicVM",
// 	"name": "g1-1",
// 	"rootDiskSize": "default, 30, 42, ...",
// 	"rootDiskType": "default, TYPE1, ...",
// 	"subGroupSize": "3",
// 	"vmUserPassword": "string"
//   }



///



// vm 생성 결과 표시
// 여러개의 vm이 생성될 수 있으므로 각각 결과를 표시
var resultVmCreateMap = new Map();

function vmCreateCallback(resultVmKey, resultStatus) {
	resultVmCreateMap.set(resultVmKey, resultStatus)
	var resultText = "";
	var createdServer = 0;
	for (let key of resultVmCreateMap.keys()) {
		console.log("vmCreateresult " + key + " : " + resultVmCreateMap.get(resultVmKey));
		resultText += key + " = " + resultVmCreateMap.get(resultVmKey) + ","
		//totalDeployServerCount--
		createdServer++;
	}

	// $("#serverRegistResult").text(resultText);

	if (resultStatus != "Success") {
		// add된 항목 제거 해야 함.

		// array는 초기화
		Simple_Server_Config_Arr.length = 0;
		simple_data_cnt = 0
		// TODO : expert 추가하면 주석 제거할 것
		Expert_Server_Config_Arr.length = 0;
		expert_data_cnt = 0
		Import_Server_Config_Arr.length = 0;
		import_data_cnt = 0
	}

	if (createdServer === totalDeployServerCount) { //모두 성공
		//getVmList();
		//commonResultAlert($("#serverRegistResult").text());

	} else if (createdServer < totalDeployServerCount) { //일부 성공
		// commonResultAlert($("#serverRegistResult").text());

	} else if (createdServer = 0) { //모두 실패
		//commonResultAlert($("#serverRegistResult").text());
	}
	commonResultAlert("VM creation request completed");
}
